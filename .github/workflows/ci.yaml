name: CI

on:
  # Runs on pushes targeting certain branches
  push:
    branches:
      - main # $default-branch
      - beta
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      releaseVersion: ${{ steps.release.outputs.releaseVersion }}
    environment:
      name: ${{ github.ref_name }}
    env:
      CLASP_ACCESS_TOKEN: ${{secrets.CLASP_ACCESS_TOKEN}}
      CLASP_CLIENT_ID: ${{secrets.CLASP_CLIENT_ID}}
      CLASP_CLIENT_SECRET: ${{secrets.CLASP_CLIENT_SECRET}}
      CLASP_EXAMPLES_DEPLOYMENT_ID: ${{secrets.CLASP_EXAMPLES_DEPLOYMENT_ID}}
      CLASP_EXAMPLES_SCRIPT_ID: ${{secrets.CLASP_EXAMPLES_SCRIPT_ID}}
      CLASP_ID_TOKEN: ${{secrets.CLASP_ID_TOKEN}}
      CLASP_LIB_DEPLOYMENT_ID: ${{secrets.CLASP_LIB_DEPLOYMENT_ID}}
      CLASP_LIB_SCRIPT_ID: ${{secrets.CLASP_LIB_SCRIPT_ID}}
      CLASP_REFRESH_TOKEN: ${{secrets.CLASP_REFRESH_TOKEN}}
      GCLOUD_PROJECT_ID: ${{secrets.GCLOUD_PROJECT_ID}}
      GCLOUD_PROJECT_NR: ${{secrets.GCLOUD_PROJECT_NR}}
    steps:
      - id: checkout
        name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      - id: nodejs
        name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: "npm"
      - id: build
        name: Build
        run: npm run ci:build
      - id: test
        name: Test
        run: npm run ci:test
      - id: coverage
        name: Coverage Comment
        uses: MishaKav/jest-coverage-comment@main
      - id: coveralls
        name: Coveralls
        uses: coverallsapp/github-action@v2
      - id: sonarcloud
        name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - id: release-status-1
        name: Release Status 1
        uses: Sujimoshi/semantic-release-action@master
        with:
          # NOTE: Keep in sync with .releaserc
          branches: |
            +([0-9])?(.{+([0-9]),x}).x
            main
            next
            next-major
            { "name": "alpha", "prerelease": true }
            { "name": "beta", "prerelease": true }
          plugins: |
            @semantic-release/commit-analyzer
            @semantic-release/release-notes-generator
          tagFormat: "${version}"
      - id: release-status-2
        name: Release Status 2
        #run: npm run release:perform && npm run release:releaseVersion | grep -E '^releaseVersion=' >> "${GITHUB_OUTPUT}" || true
        uses: cycjimmy/semantic-release-action@v3
        with:
          dry_run: true
      - id: release-info
        name: Release Info
        run: |
          echo "RS1 channel: ${{ steps.release-status-1.outputs.channel }}"
          echo "RS1 name: ${{ steps.release-status-1.outputs.name }}"
          echo "RS1 tag: ${{ steps.release-status-1.outputs.tag }}"
          echo "RS1 type: ${{ steps.release-status-1.outputs.type }}"
          echo "RS1 version: ${{ steps.release-status-1.outputs.version }}"
          echo "RS2 last_release_git_head: ${{ steps.release-status-2.outputs.last_release_git_head }}"
          echo "RS2 last_release_git_tag: ${{ steps.release-status-2.outputs.last_release_git_tag }}"
          echo "RS2 last_release_version: ${{ steps.release-status-2.outputs.last_release_version }}"
          echo "RS2 new_release_channel: ${{ steps.release-status-2.outputs.new_release_channel }}"
          echo "RS2 new_release_git_head: ${{ steps.release-status-2.outputs.new_release_git_head }}"
          echo "RS2 new_release_git_tag: ${{ steps.release-status-2.outputs.new_release_git_tag }}"
          echo "RS2 new_release_major_version: ${{ steps.release-status-2.outputs.new_release_major_version }}"
          echo "RS2 new_release_minor_version: ${{ steps.release-status-2.outputs.new_release_minor_version }}"
          echo "RS2 new_release_patch_version: ${{ steps.release-status-2.outputs.new_release_patch_version }}"
          echo "RS2 new_release_published: ${{ steps.release-status-2.outputs.new_release_published }}"
          echo "RS2 new_release_version: ${{ steps.release-status-2.outputs.new_release_version }}"
      - id: push-lib
        name: Push Lib
        run: npm run push
      - id: release
        if: ${{ false }}
        name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # run: npm run release:perform && npm run release:releaseVersion | grep -E '^releaseVersion=' >> "${GITHUB_OUTPUT}" || true
        uses: cycjimmy/semantic-release-action@v3
      - id: deploy-lib
        # if: ${{ steps.release.outputs.releaseVersion }}
        if: ${{ false }}
        name: Deploy Lib
        run: npm run deploy
      - id: setup-pages
        name: Setup Pages
        uses: actions/configure-pages@v3
      - id: upload-pages
        name: Upload Pages
        uses: actions/upload-pages-artifact@v2
        with:
          path: "build/docs"
  pages:
    # See https://github.com/actions/starter-workflows/blob/main/pages/static.yml
    runs-on: ubuntu-latest
    needs: build
    if: ${{ false && needs.build.outputs.releaseVersion }}
    # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
    permissions:
      contents: read
      pages: write
      id-token: write

    # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
    # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
    concurrency:
      group: "pages"
      cancel-in-progress: false
    steps:
      - name: Deploy Pages
        id: deploy-pages
        uses: actions/deploy-pages@v2
